# using Random
# using SplittableRandoms

# sr = SplittableRandom()


# using StatsPlots
# using Distributions
# histogram(randn(sr,3000), normalize = true)
# plot!(Normal())
# histogram(randexp(sr,3000), normalize = true)
# plot!(Exponential())
# histogram(rand(sr, Uniform(-pi,pi), 3000), normalize = true)
# plot!(Uniform(-pi,pi))

# using StatsBase
# plot(autocor(rand(sr,3000)))

# Random.seed!(0)
# rand(sr)
# ruint52() = rand(Random.UInt52Raw())

# ruint52()

# # tests from https://www.vincent-lunot.com/post/playing-with-pseudo-random-number-generators-part-3/
# using Plots
# using Statistics

# sr = SplittableRandom()
# bits = zeros(Bool, 1024, 1024)
# number = 0
# for i in 1:1024
#     for j in 1:1024
#         if j % 64 == 1
#             number = rand(sr,UInt64)
#         end
#         bits[i, j] = number & 1
#         number >>= 1
#     end
# end
# heatmap(bits)
# title!("2^14 numbers generated by splitmix64") # 2^20 [1024^2] / 2^64 [bits in 64 bits]

# function check_subseq(delta, repeat=100, iter=2^16)
#     count = zeros(Int, repeat, 64)
#     x1 = rand(sr,UInt64)
#     x = 0
#     total = 0
#     for r in 1:repeat
#         for i in 1:iter
#             x = rand(sr,UInt64)
#             if i % delta == 0
#                 total += 1
#                 for j in 1:64
#                     count[r, j] += (x - x1) & 1
#                     x >>= 1
#                 end
#             end
#         end
#     end
#     count, div(total, repeat)
# end


# count, total = check_subseq(32)
# println("total generated numbers: ", total)
# println("mean: ", mean(count))
# println("std: ", std(count))
# println("median: ", median(count))
# println("min: ", minimum(count))
# println("max: ", maximum(count))